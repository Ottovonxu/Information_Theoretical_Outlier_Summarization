function [YYYYMMDD,HHMMLST,Zenithdeg,Azimuthdeg,ETRWm2,ETRNWm2,GloModWm2,GloModUnc,GloModSource,DirModWm2,DirModUnc,DirModSource,DifModWm2,DifModUnc,DifModSource,MeasGloWm2,MeasGloFlg,MeasDirWm2,MeasDirFlg,MeasDifWm2,MeasDifFlg,TotCC10ths,PrecipWatcm,PrecipWatFlg,AODunitless,AODFlg] = importfile(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [YYYYMMDD,HHMMLST,ZENITHDEG,AZIMUTHDEG,ETRWM2,ETRNWM2,GLOMODWM2,GLOMODUNC,GLOMODSOURCE,DIRMODWM2,DIRMODUNC,DIRMODSOURCE,DIFMODWM2,DIFMODUNC,DIFMODSOURCE,MEASGLOWM2,MEASGLOFLG,MEASDIRWM2,MEASDIRFLG,MEASDIFWM2,MEASDIFFLG,TOTCC10THS,PRECIPWATCM,PRECIPWATFLG,AODUNITLESS,AODFLG]
%   = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [YYYYMMDD,HHMMLST,ZENITHDEG,AZIMUTHDEG,ETRWM2,ETRNWM2,GLOMODWM2,GLOMODUNC,GLOMODSOURCE,DIRMODWM2,DIRMODUNC,DIRMODSOURCE,DIFMODWM2,DIFMODUNC,DIFMODSOURCE,MEASGLOWM2,MEASGLOFLG,MEASDIRWM2,MEASDIRFLG,MEASDIFWM2,MEASDIFFLG,TOTCC10THS,PRECIPWATCM,PRECIPWATFLG,AODUNITLESS,AODFLG]
%   = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [YYYYMMDD,HHMMLST,Zenithdeg,Azimuthdeg,ETRWm2,ETRNWm2,GloModWm2,GloModUnc,GloModSource,DirModWm2,DirModUnc,DirModSource,DifModWm2,DifModUnc,DifModSource,MeasGloWm2,MeasGloFlg,MeasDirWm2,MeasDirFlg,MeasDifWm2,MeasDifFlg,TotCC10ths,PrecipWatcm,PrecipWatFlg,AODunitless,AODFlg] = importfile('2005.csv',2, 8761);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2016/07/12 01:39:48

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

% Convert the contents of columns with dates to MATLAB datetimes using date
% format string.
try
    dates{2} = datetime(dataArray{2}, 'Format', 'HH:mm', 'InputFormat', 'HH:mm');
catch
    try
        % Handle dates surrounded by quotes
        dataArray{2} = cellfun(@(x) x(2:end-1), dataArray{2}, 'UniformOutput', false);
        dates{2} = datetime(dataArray{2}, 'Format', 'HH:mm', 'InputFormat', 'HH:mm');
    catch
        dates{2} = repmat(datetime([NaN NaN NaN]), size(dataArray{2}));
    end
end

anyBlankDates = cellfun(@isempty, dataArray{2});
anyInvalidDates = isnan(dates{2}.Hour) - anyBlankDates;
dates = dates(:,2);

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]);
rawCellColumns = raw(:, 1);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
YYYYMMDD = rawCellColumns(:, 1);
HHMMLST = dates{:, 1};
Zenithdeg = cell2mat(rawNumericColumns(:, 1));
Azimuthdeg = cell2mat(rawNumericColumns(:, 2));
ETRWm2 = cell2mat(rawNumericColumns(:, 3));
ETRNWm2 = cell2mat(rawNumericColumns(:, 4));
GloModWm2 = cell2mat(rawNumericColumns(:, 5));
GloModUnc = cell2mat(rawNumericColumns(:, 6));
GloModSource = cell2mat(rawNumericColumns(:, 7));
DirModWm2 = cell2mat(rawNumericColumns(:, 8));
DirModUnc = cell2mat(rawNumericColumns(:, 9));
DirModSource = cell2mat(rawNumericColumns(:, 10));
DifModWm2 = cell2mat(rawNumericColumns(:, 11));
DifModUnc = cell2mat(rawNumericColumns(:, 12));
DifModSource = cell2mat(rawNumericColumns(:, 13));
MeasGloWm2 = cell2mat(rawNumericColumns(:, 14));
MeasGloFlg = cell2mat(rawNumericColumns(:, 15));
MeasDirWm2 = cell2mat(rawNumericColumns(:, 16));
MeasDirFlg = cell2mat(rawNumericColumns(:, 17));
MeasDifWm2 = cell2mat(rawNumericColumns(:, 18));
MeasDifFlg = cell2mat(rawNumericColumns(:, 19));
TotCC10ths = cell2mat(rawNumericColumns(:, 20));
PrecipWatcm = cell2mat(rawNumericColumns(:, 21));
PrecipWatFlg = cell2mat(rawNumericColumns(:, 22));
AODunitless = cell2mat(rawNumericColumns(:, 23));
AODFlg = cell2mat(rawNumericColumns(:, 24));

% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% HHMMLST=datenum(HHMMLST);


